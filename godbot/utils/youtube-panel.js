"use strict";
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, ComponentType, AttachmentBuilder } = require("discord.js");
const fs = require("fs");
const path = require("path");

const PANEL_CHANNEL_ID = process.env.YT_PANEL_CHANNEL_ID || "1427975404043505726";
const YT_SOURCE = process.env.YT_CHANNEL || "https://www.youtube.com/@YoungGod_Horror";
const REGION = "KR";
const HL = "ko_KR";
const UPDATE_MS = Math.max(1, Number(process.env.YT_PANEL_UPDATE_MS || 15 * 60 * 1000));
const DATA_DIR = path.join(__dirname, "../data");
const SNAP_PATH = path.join(DATA_DIR, "yt-panel.json");
const STORE_PATH = path.join(DATA_DIR, "yt-stats.json");

const RPM_LONG_MIN = Number(process.env.YT_RPM_LONG_MIN || 800);
const RPM_LONG_MAX = Number(process.env.YT_RPM_LONG_MAX || 6000);
const DEFAULT_RPM_LONG = Number(process.env.YT_RPM_LONG || 2500);
const RPM_SHORT_MIN = Number(process.env.YT_RPM_SHORT_MIN || 200);
const RPM_SHORT_MAX = Number(process.env.YT_RPM_SHORT_MAX || 1800);
const DEFAULT_RPM_SHORT = Number(process.env.YT_RPM_SHORT || 700);
const ELIGIBLE_VIEW_PCT = Math.max(0, Math.min(100, Number(process.env.YT_ELIGIBLE_VIEW_PCT ?? 85)));
const PREMIUM_TOPUP_PCT = Math.max(0, Math.min(100, Number(process.env.YT_PREMIUM_TOPUP_PCT ?? 7)));
const SHORTS_MUSIC_DEDUCTION_PCT = Math.max(0, Math.min(100, Number(process.env.YT_SHORTS_MUSIC_DEDUCTION_PCT ?? 35)));

let _fetch = globalThis.fetch;
if (typeof _fetch !== "function") {
  try { _fetch = require("node-fetch"); } catch {}
}
let _canvas;
try { _canvas = require("canvas"); } catch {}

if (!fs.existsSync(DATA_DIR)) try { fs.mkdirSync(DATA_DIR, { recursive: true }); } catch {}

const PREFIX = "ytpanel:";
const BTN_REFRESH = `${PREFIX}refresh`;
const BTN_OPEN_CH = `${PREFIX}opench`;
const BTN_OPEN_LAST = `${PREFIX}openlast`;
const BTN_OPEN_LIVE = `${PREFIX}openlive`;
const BTN_FEEDBACK = `${PREFIX}feedback`;
const MODAL_ID = `${PREFIX}modal`;
const MODAL_TEXT_ID = `${PREFIX}text`;
const THREAD_NAME = "유튜브 피드백";

function readJson(p, d = {}) { try { if (!fs.existsSync(p)) return d; const s = fs.readFileSync(p, "utf8"); return s && s.trim() ? JSON.parse(s) : d; } catch { return d; } }
function writeJson(p, o) { try { fs.writeFileSync(p, JSON.stringify(o)); } catch {} }
function fmt(n) { if (n === undefined || n === null || Number.isNaN(n)) return "정보 없음"; return Number(n).toLocaleString("ko-KR"); }
function toKST(iso) { try { const d = new Date(iso); return d.toLocaleString("ko-KR", { timeZone: "Asia/Seoul" }); } catch { return iso || "알 수 없음"; } }
function isoDurToSeconds(iso) { const m = /^PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?$/.exec(iso || ""); if (!m) return 0; return (parseInt(m[1]||0,10)*3600)+(parseInt(m[2]||0,10)*60)+parseInt(m[3]||0,10); }
function isShort(v) { const sec = isoDurToSeconds(v.contentDetails?.duration || ""); const t = (v.snippet?.title||"").toLowerCase(); const d=(v.snippet?.description||"").toLowerCase(); const tag = t.includes("#shorts")||d.includes("#shorts"); return sec>0&&sec<=61?true:tag; }
function estimateRevenueKRW(views, rpm) { const vv = Math.max(0, Number(views)||0); const r = Math.max(200, Math.min(Number(rpm||0), 20000))||0; return Math.round((vv/1000)*r); }
function kstDateStr(d=new Date()){const k=new Date(d.toLocaleString("en-US",{timeZone:"Asia/Seoul"}));return `${k.getFullYear()}-${String(k.getMonth()+1).padStart(2,"0")}-${String(k.getDate()).padStart(2,"0")}`;}
function startOfMonthKST(y,m){const k=new Date(Date.UTC(y,m-1,1,0,0,0));const tz=new Date(k.toLocaleString("en-US",{timeZone:"Asia/Seoul"}));return new Date(tz.getFullYear(),tz.getMonth(),1,0,0,0);}
function endOfMonthKST(y,m){const s=startOfMonthKST(y,m);const e=new Date(s);e.setMonth(e.getMonth()+1);return e;}
function overlapDaysKST(aStart,aEnd,bStart,bEnd){const s=Math.max(aStart.getTime(),bStart.getTime());const e=Math.min(aEnd.getTime(),bEnd.getTime());return Math.max(0,(e-s)/86400000);}
function prevYM(){const k=new Date(new Date().toLocaleString("en-US",{timeZone:"Asia/Seoul"}));const y=k.getFullYear();const m=k.getMonth()+1;const pm=m===1?12:m-1;const py=m===1?y-1:y;return {y:py,m:pm};}
function ymStr(y,m){return `${y}-${String(m).padStart(2,"0")}`;}
function cut(s,n){if(!s)return "";return s.length>n?(s.slice(0,n-1)+"…"):s;}

async function httpGet(url){const r=await _fetch(url);let body=null;try{body=await r.text();}catch{}if(!r.ok){let msg=`HTTP ${r.status}`;if(body&&body.length<500)msg+=` • ${body}`;throw new Error(msg);}try{return body?JSON.parse(body):{};}catch{throw new Error("HTTP 200 but invalid JSON");}}

function normalizeChannelQuery(s){if(!s)return "";let q=s.trim();q=q.replace(/^https?:\/\/(www\.)?youtube\.com\//i,"");q=q.replace(/^https?:\/\/(www\.)?youtu\.be\//i,"");q=q.replace(/^@+/,"");q=q.replace(/^c\//i,"");q=q.replace(/^user\//i,"");q=q.replace(/^channel\//i,"");q=q.replace(/^[\/]+/,"");return q;}
function extractChannelFromInput(input){if(!input)return null;try{const u=new URL(input);if(!/youtu\.be|youtube\.com/.test(u.hostname))return null;if(u.pathname.startsWith("/channel/"))return{ id:u.pathname.split("/")[2]||null, query:null, viaVideo:null };if(u.pathname.startsWith("/@"))return{ id:null, query:normalizeChannelQuery(u.pathname), viaVideo:null };if(u.pathname.startsWith("/c/"))return{ id:null, query:normalizeChannelQuery(u.pathname), viaVideo:null };if(u.pathname.startsWith("/user/"))return{ id:null, query:normalizeChannelQuery(u.pathname), viaVideo:null };if(u.pathname.startsWith("/watch")||u.pathname.startsWith("/shorts/")||u.pathname.startsWith("/live/"))return{ id:null, query:null, viaVideo:extractVideoId(input) };}catch{}return null;}
function extractVideoId(input){if(!input)return null;try{if(/^[A-Za-z0-9_\-]{11}$/.test(input))return input;const url=new URL(input);if(url.pathname.startsWith("/shorts/")){const id=url.pathname.split("/")[2];if(id&&id.length>=11)return id.slice(0,11);}const v=url.searchParams.get("v");if(v&&/^[A-Za-z0-9_\-]{11}$/.test(v))return v;if(url.hostname.includes("youtu.be")){const id=url.pathname.replace("/","");if(/^[A-Za-z0-9_\-]{11}$/.test(id))return id;}}catch{}return null;}

async function ytFindChannelByName(queryOrHandle,key){const q=normalizeChannelQuery(queryOrHandle);if(/^UC[A-Za-z0-9_-]{22}$/.test(q))return q;const s=new URL("https://www.googleapis.com/youtube/v3/search");s.searchParams.set("part","snippet");s.searchParams.set("type","channel");s.searchParams.set("q",q);s.searchParams.set("maxResults","5");s.searchParams.set("regionCode",REGION);s.searchParams.set("key",key);const res=await httpGet(s.toString());const items=res.items||[];if(!items.length)return null;return items[0]?.id?.channelId||null;}
async function ytChannelCore(channelId,key){if(!channelId||!/^UC[A-Za-z0-9_-]{22}$/.test(channelId))throw new Error("invalid channelId");const u=new URL("https://www.googleapis.com/youtube/v3/channels");u.searchParams.set("part","snippet,statistics,contentDetails");u.searchParams.set("id",channelId);u.searchParams.set("key",key);const r=await httpGet(u.toString());const ch=(r.items||[])[0];if(!ch)throw new Error("channel not found");return ch;}
async function resolveChannelId(input,key){if(!input)return null;if(/^UC[A-Za-z0-9_-]{22}$/.test(input.trim()))return input.trim();const parsed=extractChannelFromInput(input);if(parsed?.id){if(/^UC[A-Za-z0-9_-]{22}$/.test(parsed.id))return parsed.id;}if(parsed?.viaVideo){const v=await ytVideoInfo(parsed.viaVideo,key);const cid=v?.video?.snippet?.channelId||null;if(cid)return cid;}if(parsed?.query){const q=normalizeChannelQuery(parsed.query);const cid=await ytFindChannelByName(q,key);if(cid)return cid;}const fb=await ytFindChannelByName(input,key);return fb||null;}
async function ytVideoInfo(videoId,key){const vapi=new URL("https://www.googleapis.com/youtube/v3/videos");vapi.searchParams.set("part","snippet,statistics,contentDetails,liveStreamingDetails");vapi.searchParams.set("hl",HL);vapi.searchParams.set("id",videoId);vapi.searchParams.set("key",key);const vres=await httpGet(vapi.toString());return (vres.items||[])[0]||null;}
async function ytChannelUploads(channelId,key,max=30){const ch=await ytChannelCore(channelId,key);const uploads=ch.contentDetails?.relatedPlaylists?.uploads;let items=[];let pageToken=null;while(items.length<max){const u=new URL("https://www.googleapis.com/youtube/v3/playlistItems");u.searchParams.set("part","snippet,contentDetails");u.searchParams.set("playlistId",uploads);u.searchParams.set("maxResults",String(Math.min(50,max-items.length)));if(pageToken)u.searchParams.set("pageToken",pageToken);u.searchParams.set("key",key);const r=await httpGet(u.toString());items=items.concat(r.items||[]);pageToken=r.nextPageToken||null;if(!pageToken)break;}const ids=items.map(i=>i.contentDetails?.videoId).filter(Boolean);const dict=new Map();for(let i=0;i<ids.length;i+=50){const slice=ids.slice(i,i+50);const v=new URL("https://www.googleapis.com/youtube/v3/videos");v.searchParams.set("part","snippet,statistics,contentDetails");v.searchParams.set("id",slice.join(","));v.searchParams.set("key",key);const vr=await httpGet(v.toString());for(const it of(vr.items||[]))dict.set(it.id,it);}const videos=[];for(const id of ids){const it=dict.get(id);if(!it)continue;videos.push(it);}videos.sort((a,b)=>new Date(b.snippet.publishedAt)-new Date(a.snippet.publishedAt));return { channel: ch, videos };}

async function ytLiveNow(channelId,key){const s=new URL("https://www.googleapis.com/youtube/v3/search");s.searchParams.set("part","snippet");s.searchParams.set("channelId",channelId);s.searchParams.set("type","video");s.searchParams.set("eventType","live");s.searchParams.set("maxResults","1");s.searchParams.set("key",key);const r=await httpGet(s.toString());const it=(r.items||[])[0];if(!it)return null;const vid=it.id?.videoId;if(!vid)return null;const v=await ytVideoInfo(vid,key);return v||null;}

function updateSnapshot(ch){try{const snap=readJson(STORE_PATH,{});const cid=ch.id;const vc=Number(ch.statistics?.viewCount||0);const today=kstDateStr();if(!snap[cid])snap[cid]=[];const arr=snap[cid];const existed=arr.find(x=>x.date===today);if(existed){existed.viewCount=vc;}else{arr.push({date:today,viewCount:vc});}const cutoff=new Date();cutoff.setDate(cutoff.getDate()-450);const cutStr=kstDateStr(cutoff);snap[cid]=arr.filter(x=>x.date>=cutStr).sort((a,b)=>a.date.localeCompare(b.date));writeJson(STORE_PATH,snap);}catch{}}
function findSnapshotAtOrBefore(snapArr,dateStr){if(!Array.isArray(snapArr)||snapArr.length===0)return null;const arr=snapArr.filter(x=>typeof x.date==="string"&&x.date<=dateStr).sort((a,b)=>a.date.localeCompare(b.date));return arr.length?arr[arr.length-1]:null;}
function computeShortLongShareByAllTime(videos){let sViews=0,lViews=0;for(const v of videos){const vv=Number(v.statistics?.viewCount||0);if(isShort(v))sViews+=vv;else lViews+=vv;}const total=sViews+lViews;if(total<=0)return{shortRatio:0.5,longRatio:0.5};return{shortRatio:sViews/total,longRatio:lViews/total};}
function estimatePrevMonthViewsFromVideos(videos,y,m){const start=startOfMonthKST(y,m);const end=endOfMonthKST(y,m);let longViews=0,shortViews=0;for(const v of videos){const pub=new Date(new Date(v.snippet?.publishedAt).toLocaleString("en-US",{timeZone:"Asia/Seoul"}));const now=new Date(new Date().toLocaleString("en-US",{timeZone:"Asia/Seoul"}));const ageDays=Math.max(1,(now.getTime()-pub.getTime())/86400000);const vpd=Number(v.statistics?.viewCount||0)/ageDays;const daysInWindow=overlapDaysKST(pub,now,start,end);const add=vpd*daysInWindow;if(isShort(v))shortViews+=add;else longViews+=add;}const total=Math.max(0,Math.round(longViews+shortViews));return { totalViews: total, longViews: Math.max(0,Math.round(longViews)), shortViews: Math.max(0,Math.round(shortViews)), method: "추정(영상별 일일조회 기반)" };}
function computePrevMonthBySnapshot(ch,videos,y,m){const snap=readJson(STORE_PATH,{});const arr=snap[ch.id]||[];const startStr=ymStr(y,m)+"-01";const endY=m===12?y+1:y;const endM=m===12?1:m+1;const endStr=ymStr(endY,endM)+"-01";const sSnap=findSnapshotAtOrBefore(arr,startStr);const eSnap=findSnapshotAtOrBefore(arr,endStr);if(!sSnap||!eSnap)return null;const delta=Math.max(0,Number(eSnap.viewCount||0)-Number(sSnap.viewCount||0));const share=computeShortLongShareByAllTime(videos);const sViews=Math.round(delta*share.shortRatio);const lViews=Math.round(delta*share.longRatio);return { totalViews: Math.max(0,delta), longViews: Math.max(0,lViews), shortViews: Math.max(0,sViews), method: "정확(채널 총조회 스냅샷)" };}

async function buildPanel(key, source){const cid=await resolveChannelId(source,key);if(!cid)throw new Error("채널 식별 실패");const pack=await ytChannelUploads(cid,key,30);const ch=pack.channel;const vids=pack.videos;updateSnapshot(ch);const sn=ch.snippet||{};const st=ch.statistics||{};const subsHidden=!!st.hiddenSubscriberCount;const subs=subsHidden?null:Number(st.subscriberCount||0);const totalViews=Number(st.viewCount||0);const totalVideos=Number(st.videoCount||0);const latest=vids[0]||null;const lastUrl=latest?`https://www.youtube.com/watch?v=${latest.id}`:null;const live=await ytLiveNow(cid,key);const liveUrl=live?`https://www.youtube.com/watch?v=${live.id}`:null;const { y, m }=prevYM();const snapshot=computePrevMonthBySnapshot(ch,vids,y,m)||estimatePrevMonthViewsFromVideos(vids,y,m);const eligible=ELIGIBLE_VIEW_PCT/100;const shortDeduct=1-(SHORTS_MUSIC_DEDUCTION_PCT/100);const premiumTop=PREMIUM_TOPUP_PCT/100;const longEligible=Math.round((snapshot.longViews||0)*eligible);const shortEligible=Math.round((snapshot.shortViews||0)*eligible);const rpmLongMid=Math.max(RPM_LONG_MIN,Math.min(DEFAULT_RPM_LONG,RPM_LONG_MAX));const rpmShortMid=Math.max(RPM_SHORT_MIN,Math.min(DEFAULT_RPM_SHORT,RPM_SHORT_MAX));const revLongMid=estimateRevenueKRW(longEligible,rpmLongMid);const revShortMid=Math.round(estimateRevenueKRW(shortEligible,rpmShortMid)*shortDeduct);const adMid=revLongMid+revShortMid;const premiumMid=Math.round(adMid*premiumTop);const totalMid=adMid+premiumMid;const revLongMin=estimateRevenueKRW(longEligible,RPM_LONG_MIN);const revShortMin=Math.round(estimateRevenueKRW(shortEligible,RPM_SHORT_MIN)*shortDeduct);const adMin=revLongMin+revShortMin;const totalMin=adMin+Math.round(adMin*premiumTop);const revLongMax=estimateRevenueKRW(longEligible,RPM_LONG_MAX);const revShortMax=Math.round(estimateRevenueKRW(shortEligible,RPM_SHORT_MAX)*shortDeduct);const adMax=revLongMax+revShortMax;const totalMax=adMax+Math.round(adMax*premiumTop);const eb=new EmbedBuilder().setColor(live?0xff0033:0x00b894).setTitle(`${sn.title||"채널"} • 실시간 현황`).setURL(`https://www.youtube.com/channel/${ch.id}`).setThumbnail(sn.thumbnails?.high?.url||sn.thumbnails?.default?.url).addFields({name:"구독자",value:subsHidden?"비공개":`**${fmt(subs)}**`,inline:true},{name:"총 조회수",value:`**${fmt(totalViews)}**`,inline:true},{name:"총 영상 수",value:`**${fmt(totalVideos)}**`,inline:true},{name:"라이브",value:live?`🟢 진행 중\n${liveUrl}`:"⚪ 오프라인",inline:false},{name:"최근 업로드",value:latest?`**${cut(latest.snippet?.title||"제목 없음",80)}**\n${toKST(latest.snippet?.publishedAt)} • ${isShort(latest)?"쇼츠":"롱폼"}\n${lastUrl}`:"없음",inline:false},{name:"전월 조회수(채널 전체)",value:`대상월 **${ymStr(y,m)} (KST)**\n총 **${fmt(snapshot.totalViews||0)}** • 롱폼 **${fmt(snapshot.longViews||0)}** • 쇼츠 **${fmt(snapshot.shortViews||0)}**\n근거: ${snapshot.method||"정보 부족"}`,inline:false},{name:"전월 수익 추정(₩)",value:`중앙값 **${fmt(totalMid)}**\n범위 **${fmt(totalMin)} ~ ${fmt(totalMax)}**\n가정: 유효조회 ${ELIGIBLE_VIEW_PCT}%, 쇼츠음악공제 ${SHORTS_MUSIC_DEDUCTION_PCT}%, 프리미엄 ${PREMIUM_TOPUP_PCT}%`,inline:false}).setFooter({text:`마지막 갱신: ${kstDateStr()} • Asia/Seoul`});const row=new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId(BTN_REFRESH).setLabel("새로고침").setStyle(ButtonStyle.Primary),new ButtonBuilder().setCustomId(BTN_FEEDBACK).setLabel("피드백 보내기").setStyle(ButtonStyle.Success),new ButtonBuilder().setCustomId(BTN_OPEN_CH).setLabel("채널 열기").setStyle(ButtonStyle.Secondary),new ButtonBuilder().setCustomId(BTN_OPEN_LAST).setLabel("최신영상").setStyle(ButtonStyle.Secondary).setDisabled(!lastUrl),new ButtonBuilder().setCustomId(BTN_OPEN_LIVE).setLabel("라이브").setStyle(live?ButtonStyle.Danger:ButtonStyle.Secondary).setDisabled(!liveUrl));return { embed: eb, components: [row], urls: { channel: `https://www.youtube.com/channel/${ch.id}`, last: lastUrl, live: liveUrl }, channelId: cid };}

async function publish(client){const key=process.env.YT_API_KEY;if(!key)throw new Error("YT_API_KEY 미설정");const panel=await buildPanel(key,YT_SOURCE);const ch=await client.channels.fetch(PANEL_CHANNEL_ID);const store=readJson(SNAP_PATH,{});const prevId=store.messageId||null;const payload={ embeds:[panel.embed], components:panel.components, allowedMentions:{parse:[]} };let msg=null;if(prevId){try{const m=await ch.messages.fetch(prevId);await m.edit(payload);msg=m;}catch{msg=await ch.send(payload);}}else{msg=await ch.send(payload);}store.messageId=msg.id;store.channelId=PANEL_CHANNEL_ID;store.ytChannelId=panel.channelId;store.urls=panel.urls;writeJson(SNAP_PATH,store);return msg;}

async function ensureFeedbackThread(message){try{const existing=await message.channel.threads.fetchActive();const found=existing.threads.find(t=>t.name===THREAD_NAME);if(found)return found;}catch{}try{const archived=await message.channel.threads.fetchArchived();const found2=archived.threads.find(t=>t.name===THREAD_NAME);if(found2)return found2;}catch{}try{return await message.startThread({ name: THREAD_NAME, autoArchiveDuration: 10080, reason: "유튜브 피드백" });}catch{ return null; }}

async function handleButtons(client,interaction){const id=interaction.customId||"";if(!id.startsWith(PREFIX))return false;const store=readJson(SNAP_PATH,{});if(id===BTN_OPEN_CH){const url=store.urls?.channel;return interaction.reply({ content:url?url:"채널 링크를 알 수 없어.", ephemeral:true });}if(id===BTN_OPEN_LAST){const url=store.urls?.last;return interaction.reply({ content:url?url:"최신 영상이 없어요.", ephemeral:true });}if(id===BTN_OPEN_LIVE){const url=store.urls?.live;return interaction.reply({ content:url?url:"현재 라이브가 없어요.", ephemeral:true });}if(id===BTN_REFRESH){await interaction.deferReply({ ephemeral:true });try{const msg=await publish(client);return interaction.editReply({ content:"갱신 완료!" });}catch(e){return interaction.editReply({ content:`갱신 실패: ${String(e.message||e)}` });}}if(id===BTN_FEEDBACK){const modal=new ModalBuilder().setCustomId(MODAL_ID).setTitle("유튜브 피드백 보내기");const ti=new TextInputBuilder().setCustomId(MODAL_TEXT_ID).setLabel("피드백 내용을 입력").setStyle(TextInputStyle.Paragraph).setRequired(true).setMaxLength(1000);const row=new ActionRowBuilder().addComponents(ti);modal.addComponents(row);try{await interaction.showModal(modal);}catch{}return true;}return true;}

async function handleModal(client,interaction){if(interaction.customId!==MODAL_ID)return false;const text=interaction.fields.getTextInputValue(MODAL_TEXT_ID)||"";const store=readJson(SNAP_PATH,{});const ch=await client.channels.fetch(store.channelId||PANEL_CHANNEL_ID);let msg=null;try{msg=await ch.messages.fetch(store.messageId);}catch{msg=await publish(client);}const thread=await ensureFeedbackThread(msg);const author=interaction.user;const line=`${author} • ${author.tag||author.id}\n${text}`;if(thread){try{await thread.send({ content: line, allowedMentions:{parse:[]} });}catch{}}try{await interaction.reply({ content:"피드백 접수 완료!", ephemeral:true });}catch{}return true;}

let _timer=null;
async function setup(client){client.removeListener?.("interactionCreate", _onIC);client.on("interactionCreate", _onIC);if(_timer)clearInterval(_timer);try{await publish(client);}catch{} _timer=setInterval(async()=>{try{await publish(client);}catch{}}, UPDATE_MS);}
async function destroy(){if(_timer)clearInterval(_timer);_timer=null;}
async function _onIC(interaction){try{if(interaction.isButton())return await handleButtons(interaction.client,interaction);if(interaction.isModalSubmit())return await handleModal(interaction.client,interaction);}catch{}}

module.exports = { setup, publish, destroy };
