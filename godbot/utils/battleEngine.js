// battleEngine.js

const championData = require('./champion-data');
const passiveSkills = require('./passive-skills');
const fileDb = require('./file-db');

// Ìå®ÏãúÎ∏å Ïã§Ìñâ (ÎßàÏßÄÎßâ Î°úÍ∑∏ 1Ï§ÑÎßå)
function runAllPassives(userData, context, actingId, targetId) {
  [actingId, targetId].forEach(uid => {
    const user = userData[uid];
    const enemy = userData[uid === actingId ? targetId : actingId];
    if (!user || !enemy) return;
    const champName = user.name;
    const passive = passiveSkills[champName]?.passive;
    if (typeof passive === 'function') {
      let log;
      try {
        log = passive(user, enemy, context);
      } catch (e) {
        log = `‚ùóÌå®ÏãúÎ∏å Ïã§Ìñâ Ïò§Î•ò: ${e}`;
      }
      if (log) {
        context.passiveLogs = context.passiveLogs || {};
        context.passiveLogs[uid] = [log]; // ÎßàÏßÄÎßâ Ìïú Ï§ÑÎßå!
      }
    }
  });
}

// Ìö®Í≥º Ï†ÅÏö©(ÌÑ¥ ÏãúÏûë/Ï¢ÖÎ£åÏãú)
function applyEffects(user, context, phase) {
  const effects = context.effects?.[user.id] || [];
  for (let i = effects.length - 1; i >= 0; i--) {
    const effect = effects[i];
    if (phase === 'turnStart' || phase === 'turnEnd') {
      if (typeof effect.turns === "number") {
        effect.turns--;
        if (effect.turns <= 0) {
          effects.splice(i, 1);
        }
      }
    }
  }
}

// Îç∞ÎØ∏ÏßÄ Í≥ÑÏÇ∞ (ÏπòÎ™ÖÌÉÄ Ìè¨Ìï®)
function calculateDamage(attacker, defender, context, ignoreDef = false) {
  let baseAtk = attacker.stats.attack;
  if (context.damage) baseAtk = context.damage;
  let def = ignoreDef ? 0 : (defender.stats.defense || 0);

  // Í¥ÄÌÜµ Ï≤òÎ¶¨
  if (context.defPenetrate !== undefined) {
    def = def * (1 - context.defPenetrate);
  } else if (context.ignoreDefensePercent) {
    def = def * (1 - context.ignoreDefensePercent);
  }

  let damage = Math.max(1, Math.floor(baseAtk - def));
  if (context.damageBuff) damage = Math.floor(damage * context.damageBuff);
  if (context.damageUpPercent) damage = Math.floor(damage * (1 + context.damageUpPercent / 100));
  if (context.damageReductionPercent) damage = Math.floor(damage * (1 - context.damageReductionPercent / 100));
  if (context.skillDamageIncrease) damage = Math.floor(damage * (1 + context.skillDamageIncrease));
  if (context.damageIncreasePercent) damage = Math.floor(damage * (1 + context.damageIncreasePercent / 100));
  if (context.damageTakenUpPercent) damage = Math.floor(damage * (1 + context.damageTakenUpPercent / 100));
  // ÏπòÎ™ÖÌÉÄ
  if (attacker.critChance && Math.random() < attacker.critChance) {
    damage = Math.floor(damage * (attacker.critDamage || 1.5));
    context.critHappened = true;
  }

  damage = Math.max(1, damage);
  return { damage, log: `${attacker.name}Ïùò Í≥µÍ≤©! ${defender.name}ÏóêÍ≤å ${damage} ÌîºÌï¥` };
}

// ÌÑ¥ Ï≤òÎ¶¨ (HP ÎèôÍ∏∞Ìôî, Ï¥ù ÌÑ¥ Ï¶ùÍ∞Ä)
function processTurn(userData, battle, actingId, targetId, action) {
  const context = battle.context;
  context.lastAction = action;
  context.turnUser = actingId;

  // === Ï¥ù ÌÑ¥ Ï¶ùÍ∞Ä ===
  battle.turn = (battle.turn || 0) + 1;
  context.globalTurn = battle.turn;

  // Ìö®Í≥º Î≤ÑÌîÑ Î∞∞Ïó¥ ÏÉùÏÑ±
  context.effects[actingId] = context.effects[actingId] || [];
  context.effects[targetId] = context.effects[targetId] || [];

  // HP ÎèôÍ∏∞Ìôî: userData <-> battle.hp
  ["user1", "user2"].forEach(uid => {
    if (userData[uid] && typeof battle.hp?.[uid] === "number") {
      userData[uid].hp = battle.hp[uid];
    }
  });

  // ÌÑ¥ Î≥Ñ Î°úÍ∑∏ Í∏∞Î°ùÏö©
  [actingId, targetId].forEach(uid => {
    const user = userData[uid];
    if (user) {
      user._lastMaxHp = user.stats.hp;
      user._lastDamageTaken = user._lastDamageTaken || 0;
    }
  });

  runAllPassives(userData, context, actingId, targetId);

  // ÏÑ∏Ìä∏, ÏïÑÎ¨¥Î¨¥ Îì± Í∏∞ÌÉÄ Í∞úÎ≥Ñ Ï±îÌîºÏñ∏ ÌäπÏàò Ï≤òÎ¶¨(Ï§ëÎ≥µ Î∞©ÏßÄ, HP ÎèôÍ∏∞Ìôî ÌïÑÏöî)
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    const enemy = userData[uid === actingId ? targetId : actingId];
    if (user && user.name === "ÏÑ∏Ìä∏" && user._setHealEnemyNextTurn && context.lastAction === "turnStart") {
      const heal = Math.floor(enemy.stats.hp * 0.05);
      enemy.hp = Math.min(enemy.hp + heal, enemy.stats.hp);
      user._setHealEnemyNextTurn = false;
      context.passiveLogs = context.passiveLogs || {};
      context.passiveLogs[uid] = [ `ü•ä 50% Ïã§Ìå®! Îã§Ïùå ÌÑ¥ ÏÉÅÎåÄ Ï≤¥Î†• 5% ÌöåÎ≥µ!` ];
    }
  });

  // "ÏïÑÎ¨¥Î¨¥" Î∞õÏùÄ ÌîºÌï¥ Í∏∞Ïñµ (turnEnd)
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "ÏïÑÎ¨¥Î¨¥" && context.lastAction === "turnEnd") {
      user._amumuLastDamage = context.lastDamageReceived || 0;
    }
  });

  // "Ïï†ÎãàÎπÑÏïÑ" Î∂ÄÌôú ÌõÑ ÌîºÌï¥ 70% Ï¶ùÍ∞Ä(Î∞©Ïñ¥)
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "Ïï†ÎãàÎπÑÏïÑ" && user._aniviaAfterRevive && action === "defend" && context.damage > 0) {
      context.damage = Math.floor(context.damage * 1.7);
    }
  });

  // "ÏùºÎùºÏò§Ïù¥" Í≥µÍ≤©Ïãú ÌîºÌï¥Îüâ Î≥¥Ï†ï
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "ÏùºÎùºÏò§Ïù¥" && user._illaoiDmgBonus && context.lastAction === "attack") {
      context.damage = Math.floor(context.damage * (1 + user._illaoiDmgBonus));
    }
  });

  // Ïπ¥ÏÑúÏä§: Ïñ∏Îç∞Îìú Ïú†ÏßÄ ÌÑ¥ Í∞êÏÜå
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "Ïπ¥ÏÑúÏä§" && user._karthusUndyingTurns) {
      if (context.lastAction === "turnEnd" && user._karthusUndyingTurns > 0) {
        user._karthusUndyingTurns -= 1;
        if (user._karthusUndyingTurns === 0 && user.hp > 0) {
          user.hp = 0; // Ïñ∏Îç∞Îìú Ìï¥Ï†ú Ïãú ÏÇ¨Îßù
        }
      }
    }
  });

  // ÏºÄÏù∏: ÌñâÎèôÎ∂àÎä• ÎàÑÏ†Å (Ïã§Ï†ú skipNextTurn Ï†ÅÏö© ÌõÑ enemy._lastDisabled Ï≤òÎ¶¨)
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    const enemy = userData[uid === actingId ? targetId : actingId];
    if (user && user.name === "ÏºÄÏù∏") {
      enemy._lastDisabled = context.effects[enemy.id]?.some(e => e.type === "skipNextTurn");
    }
  });

  // ÌÉàÎ¶¨Ïïº: Ïä§ÌÇ¨ ÌîºÌï¥ 40% Ï¶ùÍ∞Ä (Î∞©Ïñ¥ Ïãú Ïä§ÌÇ¨ Îç∞ÎØ∏ÏßÄ)
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "ÌÉàÎ¶¨Ïïº" && context.lastAction === "defend" && context.isSkill) {
      context.damage = Math.floor(context.damage * 1.4);
    }
  });

  let log = '';
  if (action === 'attack') {
    let result = calculateDamage(userData[actingId], userData[targetId], context);
    userData[targetId].hp = Math.max(0, Math.floor(userData[targetId].hp - result.damage));
    battle.hp[actingId] = userData[actingId].hp;
    battle.hp[targetId] = userData[targetId].hp;
    // NaN Î∞©ÏßÄ
    if (isNaN(battle.hp[actingId]) || battle.hp[actingId] === undefined) battle.hp[actingId] = userData[actingId].stats.hp;
    if (isNaN(battle.hp[targetId]) || battle.hp[targetId] === undefined) battle.hp[targetId] = userData[targetId].stats.hp;
    log = result.log;
    runAllPassives(userData, context, actingId, targetId);
  } else if (action === 'defend') {
    context.effects[actingId] = context.effects[actingId] || [];
    context.effects[actingId].push({ type: "damageReductionPercent", value: 50, turns: 1 });
    log = `${userData[actingId].name} Î∞©Ïñ¥!`;
    runAllPassives(userData, context, actingId, targetId);
  } else if (action === 'dodge') {
    log = `${userData[actingId].name} Ï†êÎ©∏!`;
    runAllPassives(userData, context, actingId, targetId);
  } else if (action === 'item') {
    log = `${userData[actingId].name} ÏïÑÏù¥ÌÖú ÏÇ¨Ïö©!`;
    runAllPassives(userData, context, actingId, targetId);
  }

  applyEffects(userData[actingId], context, 'turnEnd');
  applyEffects(userData[targetId], context, 'turnEnd');

  // HP ÏµúÏÜå 0, NaN Î∞©ÏßÄ, battle.hp <-> userData ÎèôÍ∏∞Ìôî
  [actingId, targetId].forEach(uid => {
    userData[uid].hp = isNaN(userData[uid].hp) ? userData[uid].stats.hp : Math.max(0, userData[uid].hp);
    battle.hp[uid]   = userData[uid].hp;
  });

  return log;
}

function initBattleContext(cur) {
  cur.context = cur.context || {};
  cur.context.effects = cur.context.effects || {};
  cur.context.passiveLogs = cur.context.passiveLogs || {};
  cur.context.actionLogs = cur.context.actionLogs || [];
  cur.context.passiveLogLines = cur.context.passiveLogLines || [];
  cur.context.skillLogLines = cur.context.skillLogLines || [];
  cur.context.personalTurns = cur.context.personalTurns || {};
}

module.exports = {
  runAllPassives,
  processTurn,
  calculateDamage,
  applyEffects,
  initBattleContext
};
