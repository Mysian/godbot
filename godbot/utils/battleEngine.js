// battleEngine.js

const championData = require('./champion-data');
const passiveSkills = require('./passive-skills');
const fileDb = require('./file-db');

// HP Î≥¥Ï†ï Ïú†Ìã∏
function safeHP(val, fallback = 1) {
  return (typeof val === "number" && !isNaN(val) && val > 0) ? val : fallback;
}

function runAllPassives(userData, context, actingId, targetId) {
  [actingId, targetId].forEach(uid => {
    const user = userData[uid];
    const enemy = userData[uid === actingId ? targetId : actingId];
    if (!user || !enemy) return;

    // Ï≤¥Î†• Î≥¥Ï†ï (Î™®Îì† Ïó∞ÏÇ∞ ÏßÅÏ†Ñ)
    user.stats = user.stats || {};
    enemy.stats = enemy.stats || {};
    user.stats.hp = safeHP(user.stats.hp, 1);
    user.hp = safeHP(user.hp, user.stats.hp);
    enemy.stats.hp = safeHP(enemy.stats.hp, 1);
    enemy.hp = safeHP(enemy.hp, enemy.stats.hp);

    // Ìö®Í≥º Î∞∞Ïó¥ ÎØ∏Î¶¨ Ï¥àÍ∏∞Ìôî (Ìå®ÏãúÎ∏åÏóêÏÑú push Ïò§Î•ò Î∞©ÏßÄ)
    context.effects = context.effects || {};
    context.effects[user.id] = context.effects[user.id] || [];
    context.effects[enemy.id] = context.effects[enemy.id] || [];

    const champName = user.name;
    const passive = passiveSkills[champName]?.passive;
    if (typeof passive === 'function') {
      let log;
      try {
        log = passive(user, enemy, context);
      } catch (e) {
        log = `‚ùóÌå®ÏãúÎ∏å Ïã§Ìñâ Ïò§Î•ò: ${e}`;
      }
      // Ìå®ÏãúÎ∏å Î°úÍ∑∏: ÎßàÏßÄÎßâ Î∞úÎèô Î©îÏãúÏßÄ Ìïú Ï§ÑÎßå!
      if (log) {
        context.passiveLogs = context.passiveLogs || {};
        context.passiveLogs[uid] = [log];
      }
    }
  });
}

function applyEffects(user, context, phase) {
  const effects = context.effects?.[user.id] || [];
  for (let i = effects.length - 1; i >= 0; i--) {
    const effect = effects[i];
    if (phase === 'turnStart' || phase === 'turnEnd') {
      effect.turns--;
      if (effect.turns <= 0) {
        effects.splice(i, 1);
      }
    }
  }
}

function calculateDamage(attacker, defender, context, ignoreDef = false) {
  attacker.stats = attacker.stats || {};
  defender.stats = defender.stats || {};
  attacker.stats.hp = safeHP(attacker.stats.hp, 1);
  defender.stats.hp = safeHP(defender.stats.hp, 1);

  let baseAtk = attacker.stats.attack;
  if (context.damage) baseAtk = context.damage;
  let def = ignoreDef ? 0 : (defender.stats.defense || 0);

  if (context.defPenetrate !== undefined) {
    def = def * (1 - context.defPenetrate);
  } else if (context.ignoreDefensePercent) {
    def = def * (1 - context.ignoreDefensePercent);
  }

  let damage = Math.max(1, baseAtk - def);

  if (context.damageBuff) {
    damage = Math.floor(damage * context.damageBuff);
  }
  if (context.damageUpPercent) {
    damage = Math.floor(damage * (1 + context.damageUpPercent / 100));
  }
  if (context.damageReductionPercent) {
    damage = Math.floor(damage * (1 - context.damageReductionPercent / 100));
  }
  if (context.skillDamageIncrease) {
    damage = Math.floor(damage * (1 + context.skillDamageIncrease));
  }
  if (context.damageIncreasePercent) {
    damage = Math.floor(damage * (1 + context.damageIncreasePercent / 100));
  }
  if (context.damageTakenUpPercent) {
    damage = Math.floor(damage * (1 + context.damageTakenUpPercent / 100));
  }

  return { damage, log: `${attacker.name}Ïùò Í≥µÍ≤©! ${defender.name}ÏóêÍ≤å ${damage} ÌîºÌï¥` };
}

function processTurn(userData, battle, actingId, targetId, action) {
  const context = battle.context;
  context.lastAction = action;
  context.turnUser = actingId;

  // ÌÑ¥ ÏßÑÏûÖ Ïãú Ï≤¥Î†•/Ïä§ÌÉØ ÏïàÏ†ÑÎ≥¥Ï†ï
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user) {
      user.stats = user.stats || {};
      user.stats.hp = safeHP(user.stats.hp, 1);
      user.hp = safeHP(user.hp, user.stats.hp);
      user._lastMaxHp = user.stats.hp;
      user._lastDamageTaken = user._lastDamageTaken || 0;
    }
  });

  runAllPassives(userData, context, actingId, targetId);

  // ÏÑ∏Ìä∏ Ìå®ÏãúÎ∏å: 50% Ïã§Ìå®Ïãú Îã§Ïùå ÌÑ¥ ÏÉÅÎåÄ Ï≤¥Î†• 5% ÌöåÎ≥µ
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    const enemy = userData[uid === actingId ? targetId : actingId];
    if (user && user.name === "ÏÑ∏Ìä∏" && user._setHealEnemyNextTurn && context.lastAction === "turnStart") {
      const heal = Math.floor(safeHP(enemy.stats.hp) * 0.05);
      enemy.hp = Math.min(safeHP(enemy.hp), safeHP(enemy.stats.hp)) + heal;
      user._setHealEnemyNextTurn = false;
      context.passiveLogs = context.passiveLogs || {};
      context.passiveLogs[uid] = [`ü•ä 50% Ïã§Ìå®! Îã§Ïùå ÌÑ¥ ÏÉÅÎåÄ Ï≤¥Î†• 5% ÌöåÎ≥µ!`];
    }
  });

  // ÏïÑÎ¨¥Î¨¥: Î∞õÏùÄ ÌîºÌï¥ Í∏∞Ïñµ
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "ÏïÑÎ¨¥Î¨¥" && context.lastAction === "turnEnd") {
      user._amumuLastDamage = context.lastDamageReceived || 0;
    }
  });

  // Ïï†ÎãàÎπÑÏïÑ: Î∂ÄÌôú ÌõÑ ÌîºÌï¥ 70% Ï¶ùÍ∞Ä
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "Ïï†ÎãàÎπÑÏïÑ" && user._aniviaAfterRevive && action === "defend" && context.damage > 0) {
      context.damage = Math.floor(context.damage * 1.7);
    }
  });

  // ÏùºÎùºÏò§Ïù¥: Í≥µÍ≤©Ìï† Îïå Ìï≠ÏÉÅ ÌîºÌï¥Îüâ Ï¶ùÍ∞Ä
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "ÏùºÎùºÏò§Ïù¥" && user._illaoiDmgBonus && context.lastAction === "attack") {
      context.damage = Math.floor(context.damage * (1 + user._illaoiDmgBonus));
    }
  });

  // Ïπ¥ÏÑúÏä§: Ïñ∏Îç∞Îìú ÌÑ¥ Í∞êÏÜå
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "Ïπ¥ÏÑúÏä§" && user._karthusUndyingTurns) {
      if (context.lastAction === "turnEnd" && user._karthusUndyingTurns > 0) {
        user._karthusUndyingTurns -= 1;
        if (user._karthusUndyingTurns === 0 && user.hp > 0) {
          user.hp = 0;
        }
      }
    }
  });

  // ÏºÄÏù∏: ÌñâÎèôÎ∂àÎä• ÎàÑÏ†Å
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    const enemy = userData[uid === actingId ? targetId : actingId];
    if (user && user.name === "ÏºÄÏù∏") {
      enemy._lastDisabled = context.effects[enemy.id]?.some(e => e.type === "skipNextTurn");
    }
  });

  // ÌÉàÎ¶¨Ïïº: Ïä§ÌÇ¨ ÌîºÌï¥ 40% Ï¶ùÍ∞Ä Î¶¨Ïä§ÌÅ¨
  ["user1", "user2"].forEach(uid => {
    const user = userData[uid];
    if (user && user.name === "ÌÉàÎ¶¨Ïïº" && context.lastAction === "defend" && context.isSkill) {
      context.damage = Math.floor(context.damage * 1.4);
    }
  });

  let log = '';
  if (action === 'attack') {
    let result = calculateDamage(userData[actingId], userData[targetId], context);
    userData[targetId].hp = Math.max(0, safeHP(userData[targetId].hp, userData[targetId].stats.hp) - result.damage);
    userData[targetId]._lastDamageTaken = result.damage;
    userData[targetId]._lastMaxHp = userData[targetId].stats.hp;
    log = result.log;
    runAllPassives(userData, context, actingId, targetId);
  } else if (action === 'defend') {
    context.effects[actingId] = context.effects[actingId] || [];
    context.effects[actingId].push({ type: "damageReductionPercent", value: 50, turns: 1 });
    log = `${userData[actingId].name} Î∞©Ïñ¥!`;
    runAllPassives(userData, context, actingId, targetId);
  } else if (action === 'dodge') {
    log = `${userData[actingId].name} Ï†êÎ©∏!`;
    runAllPassives(userData, context, actingId, targetId);
  } else if (action === 'item') {
    log = `${userData[actingId].name} ÏïÑÏù¥ÌÖú ÏÇ¨Ïö©!`;
    runAllPassives(userData, context, actingId, targetId);
  }

  applyEffects(userData[actingId], context, 'turnEnd');
  applyEffects(userData[targetId], context, 'turnEnd');

  return log;
}

function initBattleContext(cur) {
  cur.context = cur.context || {};
  cur.context.effects = cur.context.effects || {};
  cur.context.passiveLogs = cur.context.passiveLogs || {};
  cur.context.actionLogs = cur.context.actionLogs || [];
  cur.context.passiveLogLines = cur.context.passiveLogLines || [];
  cur.context.skillLogLines = cur.context.skillLogLines || [];
  cur.context.personalTurns = cur.context.personalTurns || {};
}

module.exports = {
  runAllPassives,
  processTurn,
  calculateDamage,
  applyEffects,
  initBattleContext
};
